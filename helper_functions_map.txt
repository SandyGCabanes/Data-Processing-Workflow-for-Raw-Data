# Clearly mapping how the helper functions feed into each other and into the `process` function.

```
                                ┌─────────────────────┐
                                │       process       │
                                │  (Main Orchestrator)│
                                └──────────┬──────────┘
                                           │
                                           │  Calls various helpers for specific
                                           │  data transformations
           ┌───────────────────────────────┼─────────────────────────────────┐
           │                               │                                 │
           ↓                               ↓                                 ↓
┌─────────────────────────┐  ┌──────────────────────────┐  ┌──────────────────────────┐
│  Core Text/Blank Checks │  │  Value Mapping & Regex   │  │  Multi-Select Expansion  │
└─────────────────────────┘  └──────────────────────────┘  └──────────────────────────┘
│  `is_blank`             │  │  `apply_regex_map`       │  │  `split_multi`           │
│  `normalize_text`       │  │  `map_exact`             │  │  `explode_multiselect`   │
└─────────┬───────────────┘  └──────────┬───────────────┘  └──────────┬───────────────┘
          │ (calls)                     │ (calls)                     │ (calls)
          │                             │                             │
          │ `normalize_text`            │                             │  `split_multi` calls `normalize_text`
          │  calls `is_blank`           │                             │  `explode_multiselect` calls `split_multi`
          │                             │                             │  
          │                             │                             │
┌──────────────────────────────────────────────────────────────────────────────────────┐
│  Other Helper Functions (depend on the above fundamental utilities):                 │
│                                                                                      │
│  → `normalize_city` (uses `normalize_text`, `fill_from`)                             │
│  → `impute_coords` (uses `is_blank`)                                                 │
│  → `deduplicate` (uses `is_blank`)                                                   │
│  → `recode_career_stage` (uses `apply_regex_map`, `normalize_text`)                  │
│  → `success_method_clean` (uses `explode_multiselect`, `normalize_text`, `apply_regex_map`)│
│  → `fill_typework_unspecified_if_salary` (uses `is_blank`)                           │
│  → `clean_data_role` (uses `explode_multiselect`, `apply_regex_map`)                 │
│  → `assign_role_group` (uses `is_blank`)                                             │
│  → `remove_none_like_in_comms` (uses `normalize_text`)                               │
│  → `make_in_phils_flag` (uses `normalize_text`)                                      │
│  → `standardize_series_by_map_regex` (uses `apply_regex_map`)                        │
│  → `standardize_series_by_exact` (uses `map_exact`)                                  │
│  → `standardize_text_replacements` (no direct helper calls to custom helpers)        │
└──────────────────────────────────────────────────────────────────────────────────────┘
```

-----

### Flowchart Explanation

1.  **`process` (Main Orchestrator):** This function is the **top-level driver** of the data cleaning pipeline. It directly calls many of the other helper functions to perform specific transformations on the DataFrame. It acts like an **Airflow DAG orchestrating various tasks**.
2.  **Core Text/Blank Checks:**
      * `is_blank`: This is the most **fundamental utility**. It checks if a value is considered empty (None, NaN, or within the `BLANK_STRING_VALUES` set).
      * `normalize_text`: This function cleans strings (trims whitespace, replaces multiple spaces). Importantly, `normalize_text` **calls** `is_blank` to determine if a value is already blank before attempting to normalize it.
3.  **Value Mapping & Regex:**
      * `apply_regex_map`: Applies a dictionary of regular expression patterns for standardization. This function **calls** `normalize_text` to ensure the input value is clean before mapping.
      * `map_exact`: Applies an exact mapping for standardization. This function also **calls** `normalize_text`.
4.  **Multi-Select Expansion:**
      * `split_multi`: Splits a comma-separated string into a list of individual items. This function **calls** `normalize_text` to clean the input string before splitting.
      * `explode_multiselect`: This is a higher-level function designed to transform multi-select data. It **calls** `split_multi` as a key step in its process.
5.  **Other Helper Functions:** Many of the other helper functions (listed in the last box) leverage these foundational utilities. For example:
      * `recode_career_stage` **calls** `apply_regex_map` and `normalize_text`.
      * `success_method_clean` is quite comprehensive, **calling** `explode_multiselect`, `normalize_text`, and `apply_regex_map`.
      * `clean_data_role` **calls** `explode_multiselect` and `apply_regex_map`.

This layered structure ensures that common tasks (like checking for blanks or normalizing text) are handled consistently by dedicated functions, which are then reused by more complex operations. This improves the overall robustness and maintainability of the data pipeline, similar to building a sophisticated **Tableau** dashboard where individual calculations and transformations are layered to produce the final visualizations.